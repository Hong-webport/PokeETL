{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "document.addEventListener('DOMContentLoaded', () => {\n",
    "\n",
    "    // Connect to websocket\n",
    "    var socket = io.connect(location.protocol + '//' + document.domain + ':' + location.port);\n",
    "\n",
    "    // Retrieve username\n",
    "    const username = document.querySelector('#get-username').innerHTML;\n",
    "\n",
    "    // Set default room\n",
    "    let room = \"Lounge\"\n",
    "    joinRoom(\"Lounge\");\n",
    "\n",
    "    // Send messages\n",
    "    document.querySelector('#send_message').onclick = () => {\n",
    "        socket.emit('incoming-msg', {'msg': document.querySelector('#user_message').value,\n",
    "            'username': username, 'room': room});\n",
    "\n",
    "        document.querySelector('#user_message').value = '';\n",
    "    };\n",
    "\n",
    "    // Display all incoming messages\n",
    "    socket.on('message', data => {\n",
    "\n",
    "        // Display current message\n",
    "        if (data.msg) {\n",
    "            const p = document.createElement('p');\n",
    "            const span_username = document.createElement('span');\n",
    "            const span_timestamp = document.createElement('span');\n",
    "            const br = document.createElement('br')\n",
    "            // Display user's own message\n",
    "            if (data.username == username) {\n",
    "                    p.setAttribute(\"class\", \"my-msg\");\n",
    "\n",
    "                    // Username\n",
    "                    span_username.setAttribute(\"class\", \"my-username\");\n",
    "                    span_username.innerText = data.username;\n",
    "\n",
    "                    // Timestamp\n",
    "                    span_timestamp.setAttribute(\"class\", \"timestamp\");\n",
    "                    span_timestamp.innerText = data.time_stamp;\n",
    "\n",
    "                    // HTML to append\n",
    "                    p.innerHTML += span_username.outerHTML + br.outerHTML + data.msg + br.outerHTML + span_timestamp.outerHTML\n",
    "\n",
    "                    //Append\n",
    "                    document.querySelector('#display-message-section').append(p);\n",
    "            }\n",
    "            // Display other users' messages\n",
    "            else if (typeof data.username !== 'undefined') {\n",
    "                p.setAttribute(\"class\", \"others-msg\");\n",
    "\n",
    "                // Username\n",
    "                span_username.setAttribute(\"class\", \"other-username\");\n",
    "                span_username.innerText = data.username;\n",
    "\n",
    "                // Timestamp\n",
    "                span_timestamp.setAttribute(\"class\", \"timestamp\");\n",
    "                span_timestamp.innerText = data.time_stamp;\n",
    "\n",
    "                // HTML to append\n",
    "                p.innerHTML += span_username.outerHTML + br.outerHTML + data.msg + br.outerHTML + span_timestamp.outerHTML;\n",
    "\n",
    "                //Append\n",
    "                document.querySelector('#display-message-section').append(p);\n",
    "            }\n",
    "            // Display system message\n",
    "            else {\n",
    "                printSysMsg(data.msg);\n",
    "            }\n",
    "\n",
    "\n",
    "        }\n",
    "        scrollDownChatWindow();\n",
    "    });\n",
    "\n",
    "    // Select a room\n",
    "    document.querySelectorAll('.select-room').forEach(p => {\n",
    "        p.onclick = () => {\n",
    "            let newRoom = p.innerHTML\n",
    "            // Check if user already in the room\n",
    "            if (newRoom === room) {\n",
    "                msg = `You are already in ${room} room.`;\n",
    "                printSysMsg(msg);\n",
    "            } else {\n",
    "                leaveRoom(room);\n",
    "                joinRoom(newRoom);\n",
    "                room = newRoom;\n",
    "            }\n",
    "        };\n",
    "    });\n",
    "\n",
    "    // Logout from chat\n",
    "    document.querySelector(\"#logout-btn\").onclick = () => {\n",
    "        leaveRoom(room);\n",
    "    };\n",
    "\n",
    "    // Trigger 'leave' event if user was previously on a room\n",
    "    function leaveRoom(room) {\n",
    "        socket.emit('leave', {'username': username, 'room': room});\n",
    "\n",
    "        document.querySelectorAll('.select-room').forEach(p => {\n",
    "            p.style.color = \"black\";\n",
    "        });\n",
    "    }\n",
    "\n",
    "    // Trigger 'join' event\n",
    "    function joinRoom(room) {\n",
    "\n",
    "        // Join room\n",
    "        socket.emit('join', {'username': username, 'room': room});\n",
    "\n",
    "        // Highlight selected room\n",
    "        document.querySelector('#' + CSS.escape(room)).style.color = \"#ffc107\";\n",
    "        document.querySelector('#' + CSS.escape(room)).style.backgroundColor = \"white\";\n",
    "\n",
    "        // Clear message area\n",
    "        document.querySelector('#display-message-section').innerHTML = '';\n",
    "\n",
    "        // Autofocus on text box\n",
    "        document.querySelector(\"#user_message\").focus();\n",
    "    }\n",
    "\n",
    "    // Scroll chat window down\n",
    "    function scrollDownChatWindow() {\n",
    "        const chatWindow = document.querySelector(\"#display-message-section\");\n",
    "        chatWindow.scrollTop = chatWindow.scrollHeight;\n",
    "    }\n",
    "\n",
    "    // Print system messages\n",
    "    function printSysMsg(msg) {\n",
    "        const p = document.createElement('p');\n",
    "        p.setAttribute(\"class\", \"system-msg\");\n",
    "        p.innerHTML = msg;\n",
    "        document.querySelector('#display-message-section').append(p);\n",
    "        scrollDownChatWindow()\n",
    "\n",
    "        // Autofocus on text box\n",
    "        document.querySelector(\"#user_message\").focus();\n",
    "    }\n",
    "});"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
